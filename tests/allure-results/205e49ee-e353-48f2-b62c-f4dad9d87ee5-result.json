{"name": "test_order_flow[test_data0-head]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:552:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16", "trace": "driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"12155f99-7e5d-444a-93b7-6189d18f477c\")>\norder_button_locator = 'head'\ntest_data = {'address': 'Москва, ул. Ленина, 1', 'color': 'black', 'comment': 'Позвонить за час', 'date': '01.01.2023', ...}\n\n    @pytest.mark.parametrize('order_button_locator', ['head', 'foot'])\n    @pytest.mark.parametrize('test_data', [\n        {\n            'name': 'Иван',\n            'lastname': 'Иванов',\n            'address': 'Москва, ул. Ленина, 1',\n            'metro': 'Сокольники',\n            'phone': '89998887766',\n            'date': '01.01.2023',\n            'period': 'сутки',\n            'color': 'black',\n            'comment': 'Позвонить за час'\n        },\n        {\n            'name': 'Петр',\n            'lastname': 'Петров',\n            'address': 'Санкт-Петербург, Невский пр., 10',\n            'metro': 'Чернышевская',\n            'phone': '87776665544',\n            'date': '15.12.2023',\n            'period': 'двое суток',\n            'color': 'grey',\n            'comment': 'Оставить у двери'\n        }\n    ])\n    @allure.feature('Order Flow')\n    @allure.story('Positive Order Scenario')\n    def test_order_flow(driver, order_button_locator, test_data):\n        with allure.step('Open main page'):\n            main_page = MainPage(driver)\n>           main_page.accept_cookies()\n\ntest_order_scooter.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\base_page.py:31: in accept_cookies\n    self.click(BaseLocators.COOKIE_BANNER)\n..\\pages\\base_page.py:10: in click\n    element = WebDriverWait(self.driver, timeout).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"12155f99-7e5d-444a-93b7-6189d18f477c\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000023A35036A20>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:552:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "steps": [{"name": "Open main page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:552:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n", "trace": "  File \"C:\\Users\\windw\\PycharmProjects\\Sprint_6\\tests\\test_order_scooter.py\", line 39, in test_order_flow\n    main_page.accept_cookies()\n    ~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\windw\\PycharmProjects\\Sprint_6\\pages\\base_page.py\", line 31, in accept_cookies\n    self.click(BaseLocators.COOKIE_BANNER)\n    ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\windw\\PycharmProjects\\Sprint_6\\pages\\base_page.py\", line 10, in click\n    element = WebDriverWait(self.driver, timeout).until(\n        EC.element_to_be_clickable(locator)\n    )\n  File \"C:\\Users\\windw\\PycharmProjects\\Sprint_6\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 146, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "start": 1743951629674, "stop": 1743951639852}], "attachments": [{"name": "screenshot", "source": "2afd9a44-1978-44f7-b12d-6eb61369f5ab-attachment.png", "type": "image/png"}], "parameters": [{"name": "test_data", "value": "{'name': 'Иван', 'lastname': 'Иванов', 'address': 'Москва, ул. Ленина, 1', 'metro': 'Сокольники', 'phone': '89998887766', 'date': '01.01.2023', 'period': 'сутки', 'color': 'black', 'comment': 'Позвонить за час'}"}, {"name": "order_button_locator", "value": "'head'"}], "start": 1743951629674, "stop": 1743951639855, "uuid": "ec939191-069f-4802-9bfb-d9d9010702a7", "historyId": "e7f256ce18ccd987b75beb52c73d76ec", "testCaseId": "be2415c871f921656ea320ae80ebac1d", "fullName": "tests.test_order_scooter#test_order_flow", "labels": [{"name": "story", "value": "Positive Order Scenario"}, {"name": "feature", "value": "Order Flow"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order_scooter"}, {"name": "host", "value": "Gemini_78"}, {"name": "thread", "value": "18156-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order_scooter"}]}