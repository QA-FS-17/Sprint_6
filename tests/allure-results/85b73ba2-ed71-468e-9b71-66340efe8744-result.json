{"name": "test_order_flow[footer-order_data1]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <div class=\"Dropdown-placeholder\"> is not clickable at point (720,261) because another element <div class=\"react-datepicker__current-month\"> obscures it\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:351:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:354:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:230:31", "trace": "driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"7c33ef73-74f5-4c20-b928-ab7d6c7d3725\")>\norder_button_locator = 'footer'\norder_data = {'address': 'Санкт-Петербург, Невский пр., 10', 'color': 'grey', 'comment': '', 'delivery_date': '15.01.2025', ...}\n\n    @pytest.mark.parametrize(\n        \"order_button_locator, order_data\",\n        [\n            (\"header\", {\n                \"name\": \"Иван\",\n                \"last_name\": \"Иванов\",\n                \"address\": \"Москва, ул. Тверская, 1\",\n                \"metro_station\": \"Тверская\",\n                \"phone\": \"+79998887766\",\n                \"delivery_date\": \"01.01.2025\",\n                \"rental_period\": \"сутки\",\n                \"color\": \"black\",\n                \"comment\": \"Позвонить за час\"\n            }),\n            (\"footer\", {\n                \"name\": \"Петр\",\n                \"last_name\": \"Петров\",\n                \"address\": \"Санкт-Петербург, Невский пр., 10\",\n                \"metro_station\": \"Невский проспект\",\n                \"phone\": \"+79997776655\",\n                \"delivery_date\": \"15.01.2025\",\n                \"rental_period\": \"двое суток\",\n                \"color\": \"grey\",\n                \"comment\": \"\"\n            })\n        ]\n    )\n    @allure.feature(\"Заказ самоката\")\n    @allure.story(\"Позитивный сценарий заказа\")\n    def test_order_flow(driver, order_button_locator, order_data):\n        main_page = MainPage(driver)\n        order_page = OrderPage(driver)\n        order_modal = OrderModal(driver)\n    \n        with allure.step(\"Открыть главную страницу\"):\n            driver.get(\"https://qa-scooter.praktikum-services.ru/\")\n            main_page.accept_cookies()\n    \n        with allure.step(f\"Нажать кнопку 'Заказать' в {'хэдере' if order_button_locator == 'header' else 'футере'}\"):\n            if order_button_locator == \"header\":\n                main_page.click_header_order_button()\n            else:\n                main_page.click_footer_order_button()\n    \n        with allure.step(\"Заполнить первую страницу формы заказа\"):\n            order_page.fill_first_page(\n                order_data[\"name\"],\n                order_data[\"last_name\"],\n                order_data[\"address\"],\n                order_data[\"metro_station\"],\n                order_data[\"phone\"]\n            )\n    \n        with allure.step(\"Заполнить вторую страницу формы заказа\"):\n>           order_page.fill_second_page(\n                order_data[\"delivery_date\"],\n                order_data[\"rental_period\"],\n                order_data[\"color\"],\n                order_data[\"comment\"]\n            )\n\ntest_order_scooter.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\order_page.py:34: in fill_second_page\n    self.click_element(self.RENTAL_PERIOD_DROPDOWN)\n..\\pages\\base_page.py:16: in click_element\n    self.find_element(locator).click()\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002A049F31450>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <div class=\\\\\"Dropdown-plac...\":\"<div class=\\\\\"Dropdown-placeholder\\\\\">\",\"overlayingElement\":\"<div class=\\\\\"react-datepicker__current-month\\\\\">\"}}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <div class=\"Dropdown-placeholder\"> is not clickable at point (720,261) because another element <div class=\"react-datepicker__current-month\"> obscures it\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nE       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:351:5\nE       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11\nE       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11\nE       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:354:29\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:230:31\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "steps": [{"name": "Открыть главную страницу", "status": "passed", "start": 1743949595990, "stop": 1743949597447}, {"name": "Нажать кнопку 'Заказать' в футере", "status": "passed", "start": 1743949597447, "stop": 1743949597695}, {"name": "Заполнить первую страницу формы заказа", "status": "passed", "start": 1743949597695, "stop": 1743949599126}, {"name": "Заполнить вторую страницу формы заказа", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <div class=\"Dropdown-placeholder\"> is not clickable at point (720,261) because another element <div class=\"react-datepicker__current-month\"> obscures it\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:351:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:354:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:230:31\n\n", "trace": "  File \"C:\\Users\\windw\\PycharmProjects\\Sprint_6\\tests\\test_order_scooter.py\", line 64, in test_order_flow\n    order_page.fill_second_page(\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n        order_data[\"delivery_date\"],\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ...<2 lines>...\n        order_data[\"comment\"]\n        ^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"C:\\Users\\windw\\PycharmProjects\\Sprint_6\\pages\\order_page.py\", line 34, in fill_second_page\n    self.click_element(self.RENTAL_PERIOD_DROPDOWN)\n    ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\windw\\PycharmProjects\\Sprint_6\\pages\\base_page.py\", line 16, in click_element\n    self.find_element(locator).click()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\windw\\PycharmProjects\\Sprint_6\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 119, in click\n    self._execute(Command.CLICK_ELEMENT)\n    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\windw\\PycharmProjects\\Sprint_6\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 572, in _execute\n    return self._parent.execute(command, params)\n           ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\windw\\PycharmProjects\\Sprint_6\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\windw\\PycharmProjects\\Sprint_6\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1743949599126, "stop": 1743949599270}], "attachments": [{"name": "screenshot", "source": "51527487-8cda-4cac-9135-ebdfb82201af-attachment.png", "type": "image/png"}], "parameters": [{"name": "order_button_locator", "value": "'footer'"}, {"name": "order_data", "value": "{'name': 'Петр', 'last_name': 'Петров', 'address': 'Санкт-Петербург, Невский пр., 10', 'metro_station': 'Невский проспект', 'phone': '+79997776655', 'delivery_date': '15.01.2025', 'rental_period': 'двое суток', 'color': 'grey', 'comment': ''}"}], "start": 1743949595990, "stop": 1743949599272, "uuid": "6692be32-add1-497a-87fe-29cc63cb6723", "historyId": "213e71f98158f0192acb66b59aa6b4a4", "testCaseId": "be2415c871f921656ea320ae80ebac1d", "fullName": "tests.test_order_scooter#test_order_flow", "labels": [{"name": "story", "value": "Позитивный сценарий заказа"}, {"name": "feature", "value": "Заказ самоката"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order_scooter"}, {"name": "host", "value": "Gemini_78"}, {"name": "thread", "value": "17512-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order_scooter"}]}