{"name": "Order from foot", "status": "broken", "statusDetails": {"message": "ValueError: Не удалось выбрать станцию метро. Ожидалось: Бабушкинская, выбрано:", "trace": "self = <tests.test_order_scooter.TestOrderFlow object at 0x0000020D3FFB8690>\ndriver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"7b14775a-23d3-4e8c-b732-1d6063facf80\")>\nentry_point = 'foot'\n\n    @allure.title('Order from {entry_point}')\n    @pytest.mark.parametrize('entry_point', ['head', 'foot'])\n    def test_successful_order_flow(self, driver, entry_point):\n        order_data = generate_order_data()\n        allure.attach(str(order_data), name=\"Test Data\", attachment_type=allure.attachment_type.TEXT)\n    \n        main_page = MainPage(driver)\n        order_page = OrderPage(driver)\n    \n        # Main page steps\n        main_page.open()\n        main_page.accept_cookies()\n    \n        # Start order\n        if entry_point == 'head':\n            main_page.click_head_order_button()\n        else:\n            main_page.scroll_and_click_foot_order_button()\n    \n        # Fill forms\n>       order_page.fill_personal_info(\n            order_data['name'],\n            order_data['lastname'],\n            order_data['address'],\n            order_data['metro'],\n            order_data['phone']\n        )\n\ntest_order_scooter.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\order_page.py:28: in fill_personal_info\n    self._select_metro_with_verify(metro)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.order_page.OrderPage object at 0x0000020D4008D6D0>\nstation = 'Бабушкинская'\n\n    def _select_metro_with_verify(self, station):\n        \"\"\"Выбор станции метро с проверкой\"\"\"\n        # Открытие выпадающего списка\n        metro_input = self.wait.until(\n            EC.element_to_be_clickable(\n                (By.XPATH, \"//div[contains(@class, 'select-search')]//input\")\n            )\n        )\n        self.driver.execute_script(\"arguments[0].scrollIntoView({block: 'center'});\", metro_input)\n        metro_input.click()\n        time.sleep(0.5)\n    \n        # Выбор станции\n        station_xpath = f\"//div[contains(@class, 'select-search__select')]//*[text()='{station}']\"\n        station_btn = self.wait.until(\n            EC.visibility_of_element_located((By.XPATH, station_xpath))\n        )\n        self.driver.execute_script(\"arguments[0].scrollIntoView({block: 'center'});\", station_btn)\n        station_btn.click()\n        time.sleep(0.5)\n    \n        # Проверка выбора\n        selected_metro = self.wait.until(\n            EC.visibility_of_element_located(\n                (By.XPATH, \"//div[contains(@class, 'select-search__value')]\")\n            )\n        ).text\n        if station not in selected_metro:\n>           raise ValueError(f\"Не удалось выбрать станцию метро. Ожидалось: {station}, выбрано: {selected_metro}\")\nE           ValueError: Не удалось выбрать станцию метро. Ожидалось: Бабушкинская, выбрано:\n\n..\\pages\\order_page.py:80: ValueError"}, "attachments": [{"name": "Test Data", "source": "efd4a417-08ca-4be1-ac8f-53fabcd3d921-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "entry_point", "value": "'foot'"}], "start": 1743969290900, "stop": 1743969297196, "uuid": "7c933cfd-6904-4342-8d7b-6d077e57d7f5", "historyId": "5d09b3fccd0edeb1dae7fe2804ee684e", "testCaseId": "1e85d20b957fb5b46498ca86a691026e", "fullName": "tests.test_order_scooter.TestOrderFlow#test_successful_order_flow", "labels": [{"name": "feature", "value": "Order Flow"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order_scooter"}, {"name": "subSuite", "value": "TestOrderFlow"}, {"name": "host", "value": "Gemini_78"}, {"name": "thread", "value": "13436-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order_scooter"}]}