{"name": "Order from head", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:552:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16", "trace": "self = <tests.test_order_scooter.TestOrderFlow object at 0x0000023A1FF387D0>\ndriver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"4fa7706b-70de-4c0f-a98d-cc13cb931487\")>\nentry_point = 'head'\n\n    @allure.title('Order from {entry_point}')\n    @pytest.mark.parametrize('entry_point', ['head', 'foot'])\n    def test_successful_order_flow(self, driver, entry_point):\n        order_data = generate_order_data()\n        allure.attach(str(order_data), name=\"Test Data\", attachment_type=allure.attachment_type.TEXT)\n    \n        main_page = MainPage(driver)\n        order_page = OrderPage(driver)\n    \n        # Main page steps\n        main_page.open()\n        main_page.accept_cookies()\n    \n        # Start order\n        if entry_point == 'head':\n            main_page.click_head_order_button()\n        else:\n            main_page.scroll_and_click_foot_order_button()\n    \n        # Fill forms\n>       order_page.fill_personal_info(\n            order_data['name'],\n            order_data['lastname'],\n            order_data['address'],\n            order_data['metro'],\n            order_data['phone']\n        )\n\ntest_order_scooter.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\order_page.py:14: in fill_personal_info\n    form = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"4fa7706b-70de-4c0f-a98d-cc13cb931487\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x0000023A20064540>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:552:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "attachments": [{"name": "Test Data", "source": "37339d8a-92de-482e-856d-0b6456b6a329-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "entry_point", "value": "'head'"}], "start": 1743968423874, "stop": 1743968435787, "uuid": "31a70de9-5100-4a24-a6d5-7d4db4b9c798", "historyId": "a5c03886fde6e2866042c2e58ac635a4", "testCaseId": "1e85d20b957fb5b46498ca86a691026e", "fullName": "tests.test_order_scooter.TestOrderFlow#test_successful_order_flow", "labels": [{"name": "feature", "value": "Order Flow"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order_scooter"}, {"name": "subSuite", "value": "TestOrderFlow"}, {"name": "host", "value": "Gemini_78"}, {"name": "thread", "value": "8724-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order_scooter"}]}