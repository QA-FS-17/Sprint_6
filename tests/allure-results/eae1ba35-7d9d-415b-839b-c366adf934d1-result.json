{"name": "Test successful order from different entry points", "status": "broken", "statusDetails": {"message": "AttributeError: 'OrderPage' object has no attribute '_click_order_button'", "trace": "self = <tests.test_order_scooter.TestOrderFlow object at 0x000001EEB7B7C910>\ndriver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"77b5d3fd-b633-4b8e-9095-b93ca040a4ee\")>\nentry_point = 'head'\n\n    @allure.title('Test successful order from different entry points')\n    @pytest.mark.parametrize('entry_point', ['head', 'foot'])\n    def test_successful_order_flow(self, driver, entry_point):\n        with allure.step('Generate test data'):\n            order_data = generate_order_data()\n            print(f\"\\nTest data: {order_data}\")\n    \n        with allure.step('Open main page and accept cookies'):\n            main_page = MainPage(driver)\n            main_page.go_to_site()\n            main_page.accept_cookies()\n    \n        with allure.step(f'Start order from {entry_point} button'):\n            if entry_point == 'head':\n                main_page.click_head_order_button()\n            else:\n                main_page.scroll_to_footer()\n                main_page.click_foot_order_button()\n    \n        with allure.step('Fill first step of order form'):\n            order_page = OrderPage(driver)\n            order_page.fill_first_step_form(\n                order_data['name'],\n                order_data['lastname'],\n                order_data['address'],\n                order_data['metro'],\n                order_data['phone']\n            )\n    \n        with allure.step('Fill second step of order form'):\n>           order_page.fill_second_step_form(\n                order_data['date'],\n                order_data['rental_period'],\n                order_data['color'],\n                order_data['comment']\n            )\n\ntest_order_scooter.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.order_page.OrderPage object at 0x000001EEB7CECC20>\ndate = '09.04.2025', period = 'двое суток', color = 'black'\ncomment = 'Постоянный механический неправда эпоха.'\n\n    def fill_second_step_form(self, date, period, color, comment):\n        \"\"\"Заполнение второй страницы формы заказа с надежной обработкой даты\"\"\"\n        # Обработка даты\n        date_field = WebDriverWait(self.driver, 15).until(\n            EC.element_to_be_clickable(OrderPageLocators.DATE_INPUT)\n        )\n    \n        # Очистка поля и ввод даты\n        date_field.click()  # Активируем поле\n        date_field.clear()\n    \n        # Вводим дату по частям с небольшими паузами\n        date_field.send_keys(date[:2])  # День\n        time.sleep(0.3)\n        date_field.send_keys(date[2:4])  # Месяц\n        time.sleep(0.3)\n        date_field.send_keys(date[4:])  # Год\n        time.sleep(0.5)\n    \n        # Закрытие календаря кликом на заголовок формы\n        header = self.driver.find_element(By.XPATH, \"//div[contains(@class, 'Order_Header')]\")\n        header.click()\n        time.sleep(1)\n    \n        # Выбор периода аренды\n        self._select_dropdown_option(\n            OrderPageLocators.RENTAL_PERIOD,\n            f\"//div[contains(text(), '{period}')]\"\n        )\n    \n        # Выбор цвета\n        color_locator = getattr(OrderPageLocators, f\"COLOR_{color.upper()}\")\n        color_element = WebDriverWait(self.driver, 10).until(\n            EC.element_to_be_clickable(color_locator)\n        )\n        color_element.click()\n        time.sleep(0.5)\n    \n        # Комментарий\n        if comment:\n            comment_field = WebDriverWait(self.driver, 10).until(\n                EC.element_to_be_clickable(OrderPageLocators.COMMENT_INPUT)\n            )\n            comment_field.send_keys(comment)\n            time.sleep(0.5)\n    \n        # Нажатие кнопки заказа\n>       self._click_order_button()\nE       AttributeError: 'OrderPage' object has no attribute '_click_order_button'\n\n..\\pages\\order_page.py:121: AttributeError"}, "steps": [{"name": "Generate test data", "status": "passed", "start": 1743966528839, "stop": 1743966528845}, {"name": "Open main page and accept cookies", "status": "passed", "start": 1743966528845, "stop": 1743966530295}, {"name": "Start order from head button", "status": "passed", "start": 1743966530295, "stop": 1743966530541}, {"name": "Fill first step of order form", "status": "passed", "start": 1743966530542, "stop": 1743966532100}, {"name": "Fill second step of order form", "status": "broken", "statusDetails": {"message": "AttributeError: 'OrderPage' object has no attribute '_click_order_button'\n", "trace": "  File \"C:\\Users\\windw\\PycharmProjects\\Sprint_6\\tests\\test_order_scooter.py\", line 42, in test_successful_order_flow\n    order_page.fill_second_step_form(\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n        order_data['date'],\n        ^^^^^^^^^^^^^^^^^^^\n    ...<2 lines>...\n        order_data['comment']\n        ^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"C:\\Users\\windw\\PycharmProjects\\Sprint_6\\pages\\order_page.py\", line 121, in fill_second_step_form\n    self._click_order_button()\n    ^^^^^^^^^^^^^^^^^^^^^^^^\n"}, "start": 1743966532100, "stop": 1743966538971}], "attachments": [{"name": "stdout", "source": "52043a93-8b34-4a1a-b77c-e58384dc6cc8-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "entry_point", "value": "'head'"}], "start": 1743966528838, "stop": 1743966538977, "uuid": "9778bd74-fe7e-4eed-82a7-4cf02176b983", "historyId": "a5c03886fde6e2866042c2e58ac635a4", "testCaseId": "1e85d20b957fb5b46498ca86a691026e", "fullName": "tests.test_order_scooter.TestOrderFlow#test_successful_order_flow", "labels": [{"name": "feature", "value": "Order Flow"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order_scooter"}, {"name": "subSuite", "value": "TestOrderFlow"}, {"name": "host", "value": "Gemini_78"}, {"name": "thread", "value": "20784-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order_scooter"}]}